//jump
0000 
		(CONTROL UNIT)
 		RegDst = 0;				 Intruction memory(address[1000]) -> Return( 16'b0000xxxxxxxxxxxx; // jump)
                ALUSrc = 0;			
                MemtoReg = 0;
                RegWrite = 0;
                MemRead = 0;
                MemWrite = 0;
                Branch = 0;
                ALUOp = 2'b11;
                Jump = 1;

//TIPO R
0001(opcode) 000(reg destiono) 001(reg lido) 010(reg lido) 000(function) //and 
0001 100 011 101 001 //or  
0001 110 111 000 010 //add
0001 001 101 011 111 //slt 

		(CONTROL UNIT)                Intruction memory(address[0000:0001])
 		RegDst = 1;                          Return(instructions  [address]) ->   instructions[4'b0000] = 16'b0001010001010000; //tipo r and instructions[4'b0001] = 16'b0001010001010001; // tipo r or instructions[4'b0010] = 16'b0001010001010010; // tipo r add   instructions[4'b0011] = 16'b0001010001010111; // tipo r slt
       		ALUSrc = 0;
                MemtoReg = 0;
                RegWrite = 1;
                MemRead = 0;
                MemWrite = 0;
                Branch = 0;
                ALUOp = 2'b10;
                Jump = 0;							 






//LW
0010 000 001 xxx 010 //add                         Intruction memory(address[0100])->Return  instructions[4'b0100] = 16'b0010000001xxx010; //lw add

		RegDst = 0;
                ALUSrc = 1;
                MemtoReg = 1;
                RegWrite = 1;
                MemRead = 1;
                MemWrite = 0;
                Branch = 0;
                ALUOp = 2'b00;
                Jump = 0;

//SW
0011 000 001 xxx 010 //add			 Intruction memory(address[0101])->Return  instructions[4'b0100] = 16'b0011000001xxx010; //lw add

		RegDst = 0;
                ALUSrc = 1;
                MemtoReg = 0;
                RegWrite = 0;
                MemRead = 0;
                MemWrite = 1;
                Branch = 0;
                ALUOp = 2'b00;
                Jump = 0;


//BRANCH 
0100 100 111 xxx 110 //sub			beq  Intruction memory(address[0110])->Return  instructions[4'b0100] = 16'b0100100100xxx110; //beq sub
 		RegDst = 0;			bnq  Intruction memory(address[0110])->Return  instructions[4'b0111] = 16'b0100100111xxx110; //bnq 
                ALUSrc = 0;
                MemtoReg = 0;
                RegWrite = 0;
                MemRead = 0;
                MemWrite = 0;
                Branch = 1;
                ALUOp = 2'b01;
                Jump = 0;
